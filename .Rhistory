install.packages("knitr")
install.packages("knitr")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("gridExtra")
install.packages("reshape2")
install.packages("tidyr")
install.packages("GGally")
install.packages("scales")
install.packages("RColorBrewer")
install.packages("xlsx")
install.packages("ggthemes")
install.packages("stringr")
library(ggplot2)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(reshape2)
library(tidyr)
library(GGally)
library(ggplot2)
library(dplyr)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
library(reshape2)
library(tidyr)
library(GGally)
library(scales)
library(RColorBrewer)
library(xlsx)
install.packages(rJava)
install.packages("rJava")
library(xlsx)
library(ggthemes)
library(stringr)
library("rJava", lib.loc="~/R/win-library/3.4")
library(gridExtra)
r()
q()
library(ggplot2)
library(dplyr)
library(gridExtra)
library(reshape2)
library(tidyr)
library(GGally)
library(scales)
library(RColorBrewer)
library(xlsx)
library(ggthemes)
library(stringr)
ldf <- read.csv("prosperLoanData.csv", na.strings=c("", "NA"), )
setwd("C:/Users/cssta/OneDrive/Projects/4 EDA Loan Data")
ldf <- read.csv("prosperLoanData.csv", na.strings=c("", "NA"), )
ldf$LoanOriginationDate <- as.Date(ldf$LoanOriginationDate,
format = "%Y-%m-%d %H:%M:%S")
ldf$ListingCreationDate <- as.Date(ldf$ListingCreationDate,
format = "%Y-%m-%d %H:%M:%S")
ldf$ClosedDate <- as.Date(ldf$ClosedDate,
format = "%Y-%m-%d %H:%M:%S")
ldf$FirstRecordedCreditLine <- as.Date(ldf$FirstRecordedCreditLine,
format = "%Y-%m-%d %H:%M:%S")
ldf$DateCreditPulled <- as.Date(ldf$DateCreditPulled,
format = "%Y-%m-%d %H:%M:%S")
set.seed(1515)
samp_ldf <- ldf[sample(1:length(ldf$Term), 10000), ]
library(RColorBrewer)
#Loading packages used
library(ggplot2)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("gridExtra")
install.packages("reshape2")
install.packages("tidyr")
install.packages("GGally")
install.packages("scales")
install.packages("RColorBrewer")
install.packages("xlsx")
install.packages("ggthemes")
install.packages("stringr")
#Loading packages used
library(ggplot2)
library(dplyr)
library(gridExtra)
library(reshape2)
library(tidyr)
library(GGally)
install.packages("GGally")
install.packages("GGally")
#Loading packages used
library(ggplot2)
library(dplyr)
library(gridExtra)
library(reshape2)
library(tidyr)
library(GGally)
library(scales)
library(RColorBrewer)
library(xlsx)
library(ggthemes)
library(stringr)
#Read csv in to data frame
ldf <- read.csv("prosperLoanData.csv", na.strings=c("", "NA"), )
#Change dates to date format
ldf$LoanOriginationDate <- as.Date(ldf$LoanOriginationDate,
format = "%Y-%m-%d %H:%M:%S")
ldf$ListingCreationDate <- as.Date(ldf$ListingCreationDate,
format = "%Y-%m-%d %H:%M:%S")
ldf$ClosedDate <- as.Date(ldf$ClosedDate,
format = "%Y-%m-%d %H:%M:%S")
ldf$FirstRecordedCreditLine <- as.Date(ldf$FirstRecordedCreditLine,
format = "%Y-%m-%d %H:%M:%S")
ldf$DateCreditPulled <- as.Date(ldf$DateCreditPulled,
format = "%Y-%m-%d %H:%M:%S")
#Create sample for analysis
set.seed(1515)
samp_ldf <- ldf[sample(1:length(ldf$Term), 10000), ]
#Summary of first nine columns
summary(samp_ldf[1:9])
#Summary of first nine columns
summary(samp_ldf[1:9])
#Summary of first nine columns
summary(samp_ldf[1:9])
#Summary of first nine columns
summary(samp_ldf[1:9])
#Summary of first nine columns
summary(samp_ldf[1:9])
#Checking number of duplicated member keys
anyDuplicated(samp_ldf$MemberKey)
#Loading packages used
library(ggplot2)
library(dplyr)
library(gridExtra)
library(reshape2)
library(tidyr)
library(GGally)
library(scales)
library(RColorBrewer)
library(xlsx)
library(ggthemes)
library(stringr)
#Read csv in to data frame
ldf <- read.csv("prosperLoanData.csv", na.strings=c("", "NA"), )
#Change dates to date format
ldf$LoanOriginationDate <- as.Date(ldf$LoanOriginationDate,
format = "%Y-%m-%d %H:%M:%S")
ldf$ListingCreationDate <- as.Date(ldf$ListingCreationDate,
format = "%Y-%m-%d %H:%M:%S")
ldf$ClosedDate <- as.Date(ldf$ClosedDate,
format = "%Y-%m-%d %H:%M:%S")
ldf$FirstRecordedCreditLine <- as.Date(ldf$FirstRecordedCreditLine,
format = "%Y-%m-%d %H:%M:%S")
ldf$DateCreditPulled <- as.Date(ldf$DateCreditPulled,
format = "%Y-%m-%d %H:%M:%S")
#Create sample for analysis
set.seed(1515)
samp_ldf <- ldf[sample(1:length(ldf$Term), 10000), ]
#Summary of first nine columns
summary(samp_ldf[1:9])
#Create top loaner data frame to explore
top_loaner <- subset(samp_ldf, MemberKey == "5AD03382187155131B956C2")
top_loaner <- arrange(top_loaner, c(ListingCreationDate))
#Create a data frame subset of only people with multiple loans
templist <- subset(data.frame(sort(table(samp_ldf$MemberKey), decreasing = T)),
Freq > 1)
loaners <- subset(samp_ldf, MemberKey %in% templist[[1]])
loaners <- arrange(loaners, loaners$MemberKey, loaners$LoanOriginationDate)
#Create a logical variable in the sample for serial loaners,  True/False
samp_ldf$IsLoaner <- samp_ldf$MemberKey %in% loaners$MemberKey
changeinprosp <- loaners %>%
filter(!is.na(ProsperRating..numeric.)) %>%
group_by(MemberKey)  %>%
summarise(ProspChange = tail(ProsperRating..numeric., n = 1) -
head(ProsperRating..numeric., n = 1)) %>%
summarise(avgchange = mean(ProspChange))
changeinprosp[[1]]
#Counting then listing variables that are factors
table(sapply(samp_ldf, is.factor))
head(sort(sapply(samp_ldf, is.factor), decreasing = T), n = 15)
head(sort(sapply(samp_ldf, is.numeric), decreasing = T))
head(sort(sapply(samp_ldf, is.numeric), decreasing = T), n=15)
#Last two meaningful plots
irlimits <- c("$0", "$1-24,999", "$25,000-49,999", "$50,000-74,999",
"$75,000-99,999","$100,000+", "Not displayed", "Not employed")
irlabels <- str_wrap(gsub("-", "- ", irlimits), width = 5)
ggplot(data = samp_ldf, aes(sort(IncomeRange))) +
geom_bar(na.rm = T) +
scale_x_discrete(limits = irlimits,
labels = irlabels) +
scale_y_continuous(breaks = seq(0, 3000, 500))+
xlab("IncomeRange")
#Plots for yield, loss and return
ggplot(data = samp_ldf, aes(EstimatedEffectiveYield)) +
geom_histogram(bins = 30)
ggplot(data = samp_ldf, aes(LenderYield)) +
geom_histogram(bins = 30)
ggplot(data = samp_ldf, aes(EstimatedLoss)) +
geom_histogram(bins = 30)
ggplot(data = samp_ldf, aes(EstimatedReturn)) +
geom_histogram(bins = 30)
#Create logical correlation matrix of numeric data
x <- samp_ldf[,unlist(lapply(samp_ldf, is.numeric))]
x <- cor(x, use = "pairwise.complete.obs")
x[lower.tri(x)] <- 0
diag(x) <- 0
#Highly correlated variables
highcor <- x > .75
highcor <- data.frame(which(highcor == TRUE, arr.ind=TRUE, useNames = TRUE))
highcor$row <- names(samp_ldf)[highcor$row]
highcor$col <- names(samp_ldf)[highcor$col]
highcor <- arrange(highcor, row)
#Plots of borrower data vs lender data
ggplot(data = samp_ldf, aes(BorrowerRate, LenderYield)) +
geom_point()
#Plots of borrower data vs lender data
ggplot(data = samp_ldf, aes(BorrowerRate, EstimatedLoss)) +
geom_point()
#Plots of borrower data vs lender data
ggplot(data = samp_ldf, aes(BorrowerRate, EstimatedReturn)) +
geom_point()
#Plots of borrower data vs lender data
ggplot(data = samp_ldf, aes(BorrowerRate, LenderYield)) +
geom_point()
ggplot(data = samp_ldf, aes(BorrowerRate, EstimatedEffectiveYield)) +
geom_point()
setwd("C:/Users/cssta/OneDrive/Projects/EDA project/EDA-Project")
